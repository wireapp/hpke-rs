[package]
name = "hpke-rs"
version = "0.1.2"
authors = ["Franziskus Kiefer <franziskuskiefer@gmail.com>"]
edition = "2021"
license = "MPL-2.0"
documentation = "https://docs.rs/hpke-rs"
description = "HPKE Implementation using Evercrypt"
readme = "Readme.md"
repository = "https://github.com/franziskuskiefer/hpke-rs"

[dependencies]
log = "0.4"
serde_json = { version = "1.0", optional = true }
serde = { version = "1.0", features = ["derive"], optional = true }
tls_codec = { version = "0.2.0", features = ["derive"], optional = true }
zeroize = { version = "1.5", features = ["zeroize_derive"] }
hpke-rs-crypto = { version = "0.1.2", path = "./traits" }

pqc_kyber = { version = "0.3", features = ["kyber512", "KAT"] }
rand = "0.8"

[target.wasm32-unknown-unknown.dependencies]
pqc_kyber = { version = "0.3", features = ["wasm", "KAT", "kyber512"] }
#getrandom = { version = "0.2", features = ["js"] }

#[dependencies.oqs]
#path = "../liboqs-rust"
#git = "https://github.com/beltram/liboqs-rust"
#branch = "feat/pq"
#version = "0.7.2"
#default-features = false
#features = ["kyber"]

[features]
default = []
serialization = ["serde", "serde_json", "tls_codec", "tls_codec/serde_serialize"]
hazmat = []
hpke-test = []
hpke-test-prng = [] # ⚠️ Enable testing PRNG - DO NOT USE

[dev-dependencies]
serde_json = "1.0"
serde = { version = "1.0", features = ["derive"] }
lazy_static = "1.4"
rayon = "1.5"
hpke-rs = { path = ".", features = ["hpke-test", "hazmat"] }
hpke-rs-rust-crypto = { version = "0.1.2", path = "./rust_crypto_provider", features = ["deterministic-prng"] }
hpke-rs-evercrypt = { version = "0.1.2", path = "./evercrypt_provider", features = ["deterministic-prng"] }
rand = { version = "0.8", features = ["getrandom"] }
getrandom = { version = "0.2", features = ["js"] }
pretty_env_logger = "0.4"
criterion = { version = "0.3", features = ["html_reports"] }

[[bench]]
name = "bench"
harness = false

[[bench]]
name = "manual_benches"
harness = false

[patch.crates-io.pqc_kyber]
git = "https://github.com/beltram/kyber"
branch = "feat/pq"